/*==============================================================*/
/* Table: CLASSROOM                                             */
/*==============================================================*/
create table CLASSROOM (
   CLASSROOM_ID         VARCHAR2(5)           not null,
   DEPARTMENT_NAME      VARCHAR2(50)          not null,
   COURSE_ID            VARCHAR2(5),
   CAPACITY             INTEGER               not null,
   CLASS_BUILDING       VARCHAR2(30)          not null,
   constraint PK_CLASSROOM primary key (CLASSROOM_ID)
);

/*==============================================================*/
/* Index: DEPARTMENT_CLASSROOM_FK                               */
/*==============================================================*/
create index DEPARTMENT_CLASSROOM_FK on CLASSROOM (
   DEPARTMENT_NAME ASC
);

/*==============================================================*/
/* Index: CLASSROOM_COURSE_FK                                   */
/*==============================================================*/
create index CLASSROOM_COURSE_FK on CLASSROOM (
   COURSE_ID ASC
);

/*==============================================================*/
/* Table: COURSE                                                */
/*==============================================================*/
create table COURSE (
   COURSE_ID            VARCHAR2(5)           not null,
   DEPARTMENT_NAME      VARCHAR2(50),
   COURSE_NAME          VARCHAR2(20)          not null,
   COURSE_CREDITS       INTEGER               not null,
   constraint PK_COURSE primary key (COURSE_ID)
);

/*==============================================================*/
/* Index: DEPARTMENT_COURSE_FK                                  */
/*==============================================================*/
create index DEPARTMENT_COURSE_FK on COURSE (
   DEPARTMENT_NAME ASC
);

/*==============================================================*/
/* Table: COURSE_PROFESSOR                                      */
/*==============================================================*/
create table COURSE_PROFESSOR (
   PROFESSOR_ID         VARCHAR2(5)           not null,
   COURSE_ID            VARCHAR2(5)           not null,
   constraint PK_COURSE_PROFESSOR primary key (PROFESSOR_ID, COURSE_ID)
);

/*==============================================================*/
/* Index: COURSE_PROFESSOR_FK                                   */
/*==============================================================*/
create index COURSE_PROFESSOR_FK on COURSE_PROFESSOR (
   PROFESSOR_ID ASC
);

/*==============================================================*/
/* Table: DEPARTMENT                                            */
/*==============================================================*/
create table DEPARTMENT (
   DEPARTMENT_NAME      VARCHAR2(50)          not null,
   BUILDING             VARCHAR2(100)         not null,
   constraint PK_DEPARTMENT primary key (DEPARTMENT_NAME)
);

/*==============================================================*/
/* Table: ENROLLMENT                                            */
/*==============================================================*/
create table ENROLLMENT (
   GRADE                FLOAT                 not null,
   ENROLLMENT_ID        VARCHAR2(5)           not null,
   STUDENTID            VARCHAR2(5)           not null,
   COURSE_ID            VARCHAR2(5)           not null,
   constraint PK_ENROLLMENT primary key (ENROLLMENT_ID)
);

/*==============================================================*/
/* Index: STUDENT_ENROLLMENT_FK                                 */
/*==============================================================*/
create index STUDENT_ENROLLMENT_FK on ENROLLMENT (
   STUDENTID ASC
);

/*==============================================================*/
/* Index: COURSE_ENROLLMENT_FK                                  */
/*==============================================================*/
create index COURSE_ENROLLMENT_FK on ENROLLMENT (
   COURSE_ID ASC
);

/*==============================================================*/
/* Table: MAJOR                                                 */
/*==============================================================*/
create table MAJOR (
   MAJOR_NAME           VARCHAR2(30)          not null,
   DEPARTMENT_NAME      VARCHAR2(50)          not null,
   constraint PK_MAJOR primary key (MAJOR_NAME)
);

/*==============================================================*/
/* Index: DEAPRTMENT_MAJOR_FK                                   */
/*==============================================================*/
create index DEAPRTMENT_MAJOR_FK on MAJOR (
   DEPARTMENT_NAME ASC
);

/*==============================================================*/
/* Table: PROFESSOR                                             */
/*==============================================================*/
create table PROFESSOR (
   PROFESSOR_ID         VARCHAR2(5)           not null,
   DEPARTMENT_NAME      VARCHAR2(50)          not null,
   PROFESSOR_FIRST_NAME VARCHAR2(20)          not null,
   PROFESSOR_LAST_NAME  VARCHAR2(20)          not null,
   PROFESSOR_HIRE_DATE  DATE                  not null,
   constraint PK_PROFESSOR primary key (PROFESSOR_ID)
);

/*==============================================================*/
/* Index: DEPARTMENT_PROFESSOR_FK                               */
/*==============================================================*/
create index DEPARTMENT_PROFESSOR_FK on PROFESSOR (
   DEPARTMENT_NAME ASC
);

/*==============================================================*/
/* Table: STUDENTS                                              */
/*==============================================================*/
create table STUDENTS (
   STUDENTID            VARCHAR2(5)           not null,
   MAJOR_NAME           VARCHAR2(30),
   STUDENTFIRSTNAME     VARCHAR2(20)          not null,
   STUDENTLASTNAME      VARCHAR2(20)          not null,
   STUDENT_DATE_OF_BIRTH DATE                  not null,
   constraint PK_STUDENTS primary key (STUDENTID)
);

/*==============================================================*/
/* Index: STUDENTS_MAJOR_FK                                     */
/*==============================================================*/
create index STUDENTS_MAJOR_FK on STUDENTS (
   MAJOR_NAME ASC
);

alter table CLASSROOM
   add constraint FK_CLASSROO_CLASSROOM_COURSE foreign key (COURSE_ID)
      references COURSE (COURSE_ID);

alter table CLASSROOM
   add constraint FK_CLASSROO_DEPARTMEN_DEPARTME foreign key (DEPARTMENT_NAME)
      references DEPARTMENT (DEPARTMENT_NAME);

alter table COURSE
   add constraint FK_COURSE_DEPARTMEN_DEPARTME foreign key (DEPARTMENT_NAME)
      references DEPARTMENT (DEPARTMENT_NAME);

alter table COURSE_PROFESSOR
   add constraint FK_COURSE_P_COURSE_PR_PROFESSO foreign key (PROFESSOR_ID)
      references PROFESSOR (PROFESSOR_ID);

alter table ENROLLMENT
   add constraint FK_ENROLLME_COURSE_EN_COURSE foreign key (COURSE_ID)
      references COURSE (COURSE_ID);

alter table ENROLLMENT
   add constraint FK_ENROLLME_STUDENT_E_STUDENTS foreign key (STUDENTID)
      references STUDENTS (STUDENTID);

alter table MAJOR
   add constraint FK_MAJOR_DEAPRTMEN_DEPARTME foreign key (DEPARTMENT_NAME)
      references DEPARTMENT (DEPARTMENT_NAME);

alter table PROFESSOR
   add constraint FK_PROFESSO_DEPARTMEN_DEPARTME foreign key (DEPARTMENT_NAME)
      references DEPARTMENT (DEPARTMENT_NAME);

alter table STUDENTS
   add constraint FK_STUDENTS_STUDENTS__MAJOR foreign key (MAJOR_NAME)
      references MAJOR (MAJOR_NAME);
      
      
      
/* Inserting 20 records into DEPARTMENT table */
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Computer Science', 'Engineering Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Physics', 'Science Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Chemistry', 'Science Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Mathematics', 'Science Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('English', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Biology', 'Science Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Geology', 'Science Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Electrical Engineering', 'Engineering Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Mechanical Engineering', 'Engineering Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Civil Engineering', 'Engineering Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Art', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Music', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Theatre', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Business', 'Business Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Economics', 'Business Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('History', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Psychology', 'Science Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Sociology', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Political Science', 'Arts Block');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME, BUILDING) VALUES ('Philosophy', 'Arts Block');


      
/* Inserting 20 records into MAJOR table */
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Computer Science', 'Computer Science');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Physics', 'Physics');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Chemistry', 'Chemistry');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Mathematics', 'Mathematics');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('English Literature', 'English');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Biology', 'Biology');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Economics', 'Economics');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Political Science', 'Political Science');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Sociology', 'Sociology');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Philosophy', 'Philosophy');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('History', 'History');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Geography', 'Geography');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Psychology', 'Psychology');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Mechanical Engineering', 'Mechanical Engineering');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Electrical Engineering', 'Electrical Engineering');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Civil Engineering', 'Civil Engineering');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Biochemistry', 'Biochemistry');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Art History', 'Art History');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Music', 'Music');
INSERT INTO MAJOR(MAJOR_NAME, DEPARTMENT_NAME) VALUES ('Theater', 'Theater');

/* Inserting 20 records into PROFESSOR table */
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR1', 'Computer Science', 'John', 'Doe', DATE '2015-09-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR2', 'Physics', 'Jane', 'Doe', DATE '2016-07-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR3', 'Chemistry', 'Robert', 'Smith', DATE '2017-06-15');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR4', 'Mathematics', 'Maria', 'Rodriguez', DATE '2018-05-10');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR5', 'English', 'Paul', 'Garcia', DATE '2019-04-05');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR6', 'Biology', 'Patricia', 'Miller', DATE '2020-03-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR7', 'History', 'James', 'Martinez', DATE '2021-02-20');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR8', 'Art', 'Linda', 'Hernandez', DATE '2022-01-15');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR9', 'Art', 'Michael', 'Moore', DATE '2022-12-10');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR10', 'Music', 'Jennifer', 'Brown', DATE '2023-11-05');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR11', 'Computer Science', 'Thomas', 'Taylor', DATE '2014-10-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR12', 'Physics', 'Jessica', 'Anderson', DATE '2015-09-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR13', 'Chemistry', 'David', 'Thomas', DATE '2016-08-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR14', 'Mathematics', 'Sarah', 'Jackson', DATE '2017-07-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR15', 'English', 'Charles', 'White', DATE '2018-06-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR16', 'Biology', 'Susan', 'Harris', DATE '2019-05-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR17', 'History', 'Joseph', 'Clark', DATE '2020-04-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR18', 'History', 'Margaret', 'Lewis', DATE '2021-03-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR19', 'Art', 'Christopher', 'Lee', DATE '2022-02-01');
INSERT INTO PROFESSOR(PROFESSOR_ID, DEPARTMENT_NAME, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, PROFESSOR_HIRE_DATE) VALUES ('PR20', 'Music', 'Mary', 'Walker', DATE '2023-01-01');


/* Inserting 20 records into COURSE table */
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C1', 'Computer Science', 'Data Structures', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C2', 'Computer Science', 'Algorithms', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C3', 'Computer Science', 'Database Systems', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C4', 'Computer Science', 'Operating Systems', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C5', 'Computer Science', 'Computer Networks', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C6', 'Physics', 'Quantum Mechanics', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C7', 'Physics', 'Electrodynamics', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C8', 'Physics', 'Statistical ', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C9', 'Physics', 'Classical Mechanics', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C10', 'Physics', 'Mathematical Physics', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C11', 'English', 'Shakespearean Drama', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C12', 'English', 'Modernist Literature', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C13', 'English', 'American Literature', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C14', 'English', 'Romantic Poetry', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C15', 'English', 'Critical Theory', 3);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C16', 'Mathematics', 'Calculus', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C17', 'Mathematics', 'Linear Algebra', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C18', 'Mathematics', 'Differential ', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C19', 'Mathematics', 'Abstract Algebra', 4);
INSERT INTO COURSE(COURSE_ID, DEPARTMENT_NAME, COURSE_NAME, COURSE_CREDITS) VALUES ('C20', 'Mathematics', 'Probability ', 4);


/* Inserting records into CLASSROOM table */
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR1', 'Computer Science', 'C1', 60, 'Engineering Block 1');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR2', 'Physics', 'C2', 50, 'Science Block 1');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR3', 'Mathematics', 'C1', 70, 'Science Block 2');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR4', 'Chemistry', 'C2', 80, 'Science Block 3');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR5', 'Biology', 'C1', 55, 'Science Block 4');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR6', 'English', 'C2', 45, 'Arts Block 1');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR7', 'History', 'C1', 65, 'Arts Block 2');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR8', 'History', 'C2', 75, 'Arts Block 3');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR9', 'Sociology', 'C1', 85, 'Arts Block 4');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR10', 'Psychology', 'C2', 60, 'Arts Block 5');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR11', 'Philosophy', 'C1', 50, 'Arts Block 6');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR12', 'Political Science', 'C2', 70, 'Arts Block 7');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR13', 'Economics', 'C1', 80, 'Business Block 1');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR14', 'Business', 'C2', 55, 'Business Block 2');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR15', 'Business', 'C1', 45, 'Business Block 3');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR16', 'Business', 'C2', 65, 'Business Block 4');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR17', 'Sociology', 'C1', 75, 'Business Block 5');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR18', 'Business', 'C2', 85, 'Business Block 6');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR19', 'Philosophy', 'C1', 60, 'Business Block 7');
INSERT INTO CLASSROOM(CLASSROOM_ID, DEPARTMENT_NAME, COURSE_ID, CAPACITY, CLASS_BUILDING) VALUES ('CR20', 'Business', 'C2', 50, 'Business Block 8');

/* Inserting records into STUDENTS table */
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S1', 'Computer Science', 'Alice', 'Smith', DATE '2001-08-20');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S2', 'Physics', 'Bob', 'Johnson', DATE '2002-03-15');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S3', 'Chemistry', 'Charlie', 'Brown', DATE '2000-06-15');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S4', 'Mathematics', 'Daisy', 'Green', DATE '2002-02-22');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S5', 'English Literature', 'Edward', 'White', DATE '2001-01-01');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S6', 'Computer Science', 'Fiona', 'Black', DATE '2002-12-12');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S7', 'Physics', 'George', 'Blue', DATE '2000-11-11');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S8', 'Chemistry', 'Hannah', 'Yellow', DATE '2001-10-10');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S9', 'Mathematics', 'Ivan', 'Gray', DATE '2000-09-09');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S10', 'English Literature', 'Julia', 'Purple', DATE '2001-08-08');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S11', 'Computer Science', 'Kevin', 'Red', DATE '2000-07-07');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S12', 'Physics', 'Lily', 'Orange', DATE '2001-06-06');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S13', 'Chemistry', 'Michael', 'Green', DATE '2000-05-05');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S14', 'Mathematics', 'Nancy', 'Blue', DATE '2001-04-04');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S15', 'English Literature', 'Oscar', 'Yellow', DATE '2000-03-03');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S16', 'Computer Science', 'Patricia', 'Gray', DATE '2001-02-02');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S17', 'Physics', 'Quentin', 'Purple', DATE '2000-01-01');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S18', 'Chemistry', 'Rebecca', 'Red', DATE '2001-12-12');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S19', 'Mathematics', 'Steven', 'Orange', DATE '2000-11-11');
INSERT INTO STUDENTS(STUDENTID, MAJOR_NAME, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH) VALUES ('S20', 'English Literature', 'Teresa', 'Green', DATE '2001-10-10');


/* Inserting records into ENROLLMENT table */
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (85.5, 'E1', 'S1', 'C1');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (91.0, 'E2', 'S2', 'C2');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (78.0, 'E3', 'S3', 'C3');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (82.5, 'E4', 'S4', 'C4');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (88.0, 'E5', 'S5', 'C5');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (90.5, 'E6', 'S6', 'C6');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (85.0, 'E7', 'S7', 'C7');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (93.0, 'E8', 'S8', 'C8');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (78.5, 'E9', 'S9', 'C9');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (81.0, 'E10', 'S10', 'C10');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (89.5, 'E11', 'S11', 'C11');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (87.0, 'E12', 'S12', 'C12');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (80.0, 'E13', 'S13', 'C13');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (86.5, 'E14', 'S14', 'C14');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (84.0, 'E15', 'S15', 'C15');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (91.5, 'E16', 'S16', 'C16');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (79.0, 'E17', 'S17', 'C17');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (92.5, 'E18', 'S18', 'C18');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (83.0, 'E19', 'S19', 'C19');
INSERT INTO ENROLLMENT(GRADE, ENROLLMENT_ID, STUDENTID, COURSE_ID) VALUES (88.5, 'E20', 'S20', 'C20');



/* Inserting records into COURSE_PROFESSOR table */
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR1', 'C1');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR2', 'C2');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR3', 'C3');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR4', 'C4');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR5', 'C5');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR6', 'C6');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR7', 'C7');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR8', 'C8');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR9', 'C9');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR10', 'C10');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR11', 'C11');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR12', 'C12');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR13', 'C13');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR14', 'C14');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR15', 'C15');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR16', 'C16');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR17', 'C17');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR18', 'C18');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR19', 'C19');
INSERT INTO COURSE_PROFESSOR(PROFESSOR_ID, COURSE_ID) VALUES ('PR20', 'C20');


-- Heap-Organized Table: STUDENTS
CREATE TABLE STUDENTS_HEAP (
   STUDENTID            VARCHAR2(5)           not null,
   MAJOR_NAME           VARCHAR2(30),
   STUDENTFIRSTNAME     VARCHAR2(20)          not null,
   STUDENTLASTNAME      VARCHAR2(20)          not null,
   STUDENT_DATE_OF_BIRTH DATE                  not null,
   CONSTRAINT PK_STUDENTS_HEAP PRIMARY KEY (STUDENTID)
) ORGANIZATION HEAP;


-- Heap-Organized Table: ENROLLMENT

CREATE TABLE ENROLLMENT_HEAP (
   GRADE                FLOAT                 not null,
   ENROLLMENT_ID        VARCHAR2(5)           not null,
   STUDENTID            VARCHAR2(5)           not null,
   COURSE_ID            VARCHAR2(5)           not null,
   CONSTRAINT PK_ENROLLMENT_HEAP PRIMARY KEY (ENROLLMENT_ID)
) ORGANIZATION HEAP;


INSERT INTO STUDENTS_HEAP
SELECT * FROM STUDENTS;

INSERT INTO ENROLLMENT_HEAP
SELECT * FROM ENROLLMENT;



-- 1.b B-Tree index: For STUDENTS_HEAP table
CREATE INDEX student_idx ON STUDENTS_HEAP(MAJOR_NAME);

-- B-Tree index: For ENROLLMENT_HEAP table
CREATE INDEX enrollment_idx ON ENROLLMENT_HEAP(GRADE);


--BITMAP JOIN INDEX
CREATE BITMAP INDEX enrollment_students_bji ON ENROLLMENT (GRADE);


-- 1.d Indexed Cluster: For STUDENTS_HEAP and ENROLLMENT_HEAP tables
CREATE CLUSTER STUDENTS_ENROLLMENT_HEAP_CLUSTER (STUDENTID VARCHAR2(5))
SIZE 512;

-- Creating an index on the cluster
CREATE INDEX STUDENTS_ENROLLMENT_HEAP_CLUSTER_IDX 
ON CLUSTER STUDENTS_ENROLLMENT_HEAP_CLUSTER;

-- Creating tables in the cluster
CREATE TABLE STUDENTS_HEAP_CLUSTER 
CLUSTER STUDENTS_ENROLLMENT_HEAP_CLUSTER (STUDENTID)
AS SELECT * FROM STUDENTS_HEAP;

CREATE TABLE ENROLLMENT_HEAP_CLUSTER 
CLUSTER STUDENTS_ENROLLMENT_HEAP_CLUSTER (STUDENTID)
AS SELECT * FROM ENROLLMENT_HEAP;



INSERT INTO STUDENTS_HEAP_CLUSTER
SELECT * FROM STUDENTS_HEAP;

INSERT INTO ENROLLMENT_HEAP_CLUSTER
SELECT * FROM ENROLLMENT_HEAP;





-- Hash Cluster for STUDENTS_HEAP table
CREATE CLUSTER STUDENTS_HEAP_HASH_CLUSTER (STUDENTID VARCHAR2(5))
SIZE 512 SINGLE TABLE HASHKEYS 1000;


CREATE TABLE STUDENTS_HEAP_HASH_TABLE 
CLUSTER STUDENTS_HEAP_HASH_CLUSTER (STUDENTID)
AS SELECT * FROM STUDENTS_HEAP;

-- Hash Cluster for ENROLLMENT_HEAP table
CREATE CLUSTER ENROLLMENT_HEAP_HASH_CLUSTER (ENROLLMENT_ID VARCHAR2(5))
SIZE 512 SINGLE TABLE HASHKEYS 1000;

CREATE TABLE ENROLLMENT_HEAP_HASH_TABLE 
CLUSTER ENROLLMENT_HEAP_HASH_CLUSTER (ENROLLMENT_ID)
AS SELECT * FROM ENROLLMENT_HEAP;



INSERT INTO STUDENTS_HEAP_HASH_TABLE
SELECT * FROM STUDENTS_HEAP;


INSERT INTO ENROLLMENT_HEAP_HASH_TABLE
SELECT * FROM ENROLLMENT_HEAP;


-- 1.f Index organized tables: For STUDENTS_HEAP table
CREATE TABLE STUDENTS_HEAP_IOT ( 
   STUDENTID            VARCHAR2(5)           not null,
   MAJOR_NAME           VARCHAR2(30),
   STUDENTFIRSTNAME     VARCHAR2(20)          not null,
   STUDENTLASTNAME      VARCHAR2(20)          not null,
   STUDENT_DATE_OF_BIRTH DATE                  not null,
   CONSTRAINT PK_STUDENTS_IOT PRIMARY KEY (STUDENTID)
) ORGANIZATION INDEX;


-- Index organized tables: For ENROLLMENT_HEAP table
CREATE TABLE ENROLLMENT_HEAP_IOT (
   GRADE                FLOAT                 not null,
   ENROLLMENT_ID        VARCHAR2(5)           not null,
   STUDENTID            VARCHAR2(5)           not null,
   COURSE_ID            VARCHAR2(5)           not null,
   CONSTRAINT PK_ENROLLMENT_IOT PRIMARY KEY (ENROLLMENT_ID)
) ORGANIZATION INDEX;



INSERT INTO STUDENTS_HEAP_IOT
SELECT * FROM STUDENTS_HEAP;

INSERT INTO ENROLLMENT_HEAP_IOT
SELECT * FROM ENROLLMENT_HEAP;



--Heap Organised Queries 
--Select all records:
SELECT * FROM STUDENTS_HEAP;

--Select the total number of records:
SELECT COUNT(*) FROM STUDENTS_HEAP;

--Select one record:
SELECT * FROM STUDENTS_HEAP WHERE ROWNUM = 1;



--B-Tree index Queries

--Select all records:
SELECT * FROM ENROLLMENT_HEAP WHERE GRADE IS NOT NULL;

--Select the total number of records:
SELECT COUNT(*) FROM ENROLLMENT_HEAP WHERE GRADE IS NOT NULL;

--Select one record:
SELECT * FROM ENROLLMENT_HEAP WHERE GRADE IS NOT NULL AND ROWNUM = 1;

-- Bitmap join index:
--Select all records:
SELECT * FROM ENROLLMENT WHERE GRADE IS NOT NULL;

--Select the total number of records:
SELECT COUNT(*) FROM ENROLLMENT WHERE GRADE IS NOT NULL;

--Select one record:
SELECT * FROM ENROLLMENT WHERE GRADE IS NOT NULL AND ROWNUM = 1;

-- Indexed Cluster:

--Select all records:
SELECT * FROM ENROLLMENT_HEAP_CLUSTER;

--Select the total number of records:
SELECT COUNT(*) FROM ENROLLMENT_HEAP_CLUSTER;

--Select one record:
SELECT * FROM ENROLLMENT_HEAP_CLUSTER WHERE ROWNUM = 1;

-- Hash Cluster:
--Select all records:
SELECT * FROM STUDENTS_HEAP_HASH_TABLE;

--Select the total number of records:
SELECT COUNT(*) FROM STUDENTS_HEAP_HASH_TABLE;

--Select one record:
SELECT * FROM STUDENTS_HEAP_HASH_TABLE WHERE ROWNUM = 1;

--Index organized tables:

--Select all records:
SELECT * FROM STUDENTS_HEAP_IOT;

--Select the total number of records:
SELECT COUNT(*) FROM STUDENTS_HEAP_IOT;

--Select one record:
SELECT * FROM STUDENTS_HEAP_IOT WHERE ROWNUM = 1;




--Assignment 4


--Query with one table and multiple conditions in WHERE clause:
SELECT *
FROM STUDENTS
WHERE MAJOR_NAME = 'Computer Science' AND STUDENT_DATE_OF_BIRTH BETWEEN DATE '2001-01-01' AND DATE '2002-12-31';


--Query with two related tables and multiple conditions in WHERE clause:
SELECT *
FROM STUDENTS S
JOIN ENROLLMENT E ON S.STUDENTID = E.STUDENTID
WHERE S.MAJOR_NAME = 'Computer Science' AND E.GRADE > 80;


--Query with GROUP BY:
SELECT MAJOR_NAME, COUNT(*)
FROM STUDENTS
GROUP BY MAJOR_NAME;


--Query with two related tables and GROUP BY:
SELECT S.MAJOR_NAME, AVG(E.GRADE)
FROM STUDENTS S
JOIN ENROLLMENT E ON S.STUDENTID = E.STUDENTID
GROUP BY S.MAJOR_NAME;


--Query with GROUP BY and HAVING clause:
SELECT MAJOR_NAME, COUNT(*)
FROM STUDENTS
GROUP BY MAJOR_NAME
HAVING COUNT(*) > 3;


--Query with two related tables, GROUP BY and HAVING clause:
SELECT S.MAJOR_NAME, AVG(E.GRADE)
FROM STUDENTS S
JOIN ENROLLMENT E ON S.STUDENTID = E.STUDENTID
GROUP BY S.MAJOR_NAME
HAVING AVG(E.GRADE) > 80;


--Query with subquery in SELECT clause:
SELECT STUDENTFIRSTNAME, STUDENTLASTNAME, (SELECT MAJOR_NAME FROM MAJOR WHERE MAJOR_NAME = S.MAJOR_NAME) AS Major
FROM STUDENTS S;


--Query with subquery in FROM clause:
SELECT AVG(GRADE) 
FROM (
    SELECT * FROM (
        SELECT GRADE 
        FROM ENROLLMENT 
        ORDER BY GRADE DESC
    ) 
    WHERE ROWNUM <= 10
);





--Query with subquery in WHERE clause:
SELECT *
FROM STUDENTS
WHERE MAJOR_NAME IN (SELECT MAJOR_NAME FROM MAJOR WHERE DEPARTMENT_NAME = 'Computer Science');


--Query with subquery in HAVING clause:
SELECT S.MAJOR_NAME, AVG(E.GRADE)
FROM STUDENTS S
JOIN ENROLLMENT E ON S.STUDENTID = E.STUDENTID
GROUP BY S.MAJOR_NAME
HAVING AVG(E.GRADE) > (SELECT AVG(GRADE) FROM ENROLLMENT);


--Query with UNION, INTERSECT, MINUS construction:

-- Union
SELECT DEPARTMENT_NAME FROM DEPARTMENT
UNION
SELECT DEPARTMENT_NAME FROM COURSE;

-- Intersect
SELECT DEPARTMENT_NAME FROM DEPARTMENT
INTERSECT
SELECT DEPARTMENT_NAME FROM COURSE;

-- Minus
SELECT DEPARTMENT_NAME FROM DEPARTMENT
MINUS
SELECT DEPARTMENT_NAME FROM COURSE;



--Query with EXISTS construction:
SELECT *
FROM STUDENTS S
WHERE EXISTS (
    SELECT 1
    FROM ENROLLMENT E
    WHERE S.STUDENTID = E.STUDENTID AND E.GRADE > 85
);






--Assignment 5

--Creating Views

/* View: STUDENT_VIEW */
CREATE VIEW STUDENT_VIEW AS
SELECT 
    STUDENTS.STUDENTID, 
    STUDENTS.STUDENTFIRSTNAME, 
    STUDENTS.STUDENTLASTNAME, 
    MAJOR.MAJOR_NAME, 
    MAJOR.DEPARTMENT_NAME
FROM STUDENTS
JOIN MAJOR ON STUDENTS.MAJOR_NAME = MAJOR.MAJOR_NAME;


SELECT * FROM STUDENT_VIEW;

/* View: PROFESSOR_VIEW */
CREATE VIEW PROFESSOR_VIEW AS
SELECT PROFESSOR_ID, PROFESSOR_FIRST_NAME, PROFESSOR_LAST_NAME, DEPARTMENT_NAME
FROM PROFESSOR;

SELECT * FROM PROFESSOR_VIEW;


--Creating Materialized Views

/* Materialized View: ENROLLMENT_VIEW */
CREATE MATERIALIZED VIEW ENROLLMENT_VIEW AS
SELECT ENROLLMENT_ID, STUDENTID, COURSE_ID, GRADE
FROM ENROLLMENT;

SELECT * FROM ENROLLMENT_VIEW;

/* Materialized View: COURSE_PROF_VIEW */
CREATE MATERIALIZED VIEW COURSE_PROF_VIEW AS
SELECT PROFESSOR_ID, COURSE_ID
FROM COURSE_PROFESSOR;

SELECT * FROM COURSE_PROF_VIEW;



--3.1 CASE Expression

/* Query 1: Grades to Letter Grades */
SELECT STUDENTID, COURSE_ID,
CASE
    WHEN GRADE >= 90 THEN 'A'
    WHEN GRADE >= 80 THEN 'B'
    WHEN GRADE >= 70 THEN 'C'
    ELSE 'F'
END AS LETTER_GRADE
FROM ENROLLMENT;

/* Query 2: Major Preference */
SELECT STUDENTID, MAJOR_NAME,
CASE
    WHEN MAJOR_NAME = 'Computer Science' THEN 'Tech'
    WHEN MAJOR_NAME = 'Physics' OR MAJOR_NAME = 'Chemistry' THEN 'Science'
    ELSE 'Other'
END AS PREFERENCE
FROM STUDENTS;


--3.2 Hierarchical Queries


/* START WITH, CONNECT BY, LEVEL */
/* This type of hierarchical query is not applicable in this case as there is no hierarchical relationship between entities */

/* WITH, UNION ALL */
WITH CS_STUDENTS AS (
    SELECT STUDENTID, MAJOR_NAME FROM STUDENTS WHERE MAJOR_NAME = 'Computer Science'
), PHYSICS_STUDENTS AS (
    SELECT STUDENTID, MAJOR_NAME FROM STUDENTS WHERE MAJOR_NAME = 'Physics'
)
SELECT * FROM CS_STUDENTS
UNION ALL
SELECT * FROM PHYSICS_STUDENTS;


--3.3 Analytical Functions


/* ROW_NUMBER */
SELECT STUDENTID, COURSE_ID, GRADE, ROW_NUMBER() OVER (PARTITION BY COURSE_ID ORDER BY GRADE DESC) as RANK
FROM ENROLLMENT;

/* NTILE */
SELECT STUDENTID, COURSE_ID, GRADE, NTILE(4) OVER (ORDER BY GRADE) as QUARTILE
FROM ENROLLMENT;


--3.4 Windowing Function


/* RANGE */
SELECT STUDENTID, COURSE_ID, GRADE,
AVG(GRADE) OVER (PARTITION BY COURSE_ID ORDER BY GRADE RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CUMULATIVE_AVG
FROM ENROLLMENT;

/* ROWS */
SELECT STUDENTID, COURSE_ID, GRADE,
AVG(GRADE) OVER (PARTITION BY COURSE_ID ORDER BY GRADE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CUMULATIVE_AVG
FROM ENROLLMENT;


--The three dimension tables will be Customers, Products, and Salesmen, and the fact table will be Sales.

--Dimension Tables:

CREATE TABLE Customers (
    CustomerID VARCHAR2(5) PRIMARY KEY,
    CustomerName varchar(100),
    CustomerLocation varchar(100)
);

CREATE TABLE Products (
    ProductID VARCHAR2(5) PRIMARY KEY,
    ProductName varchar(100),
    ProductCategory varchar(100),
    ProductPrice decimal(10,2)
);

CREATE TABLE Salesmen (
    SalesmanID VARCHAR2(5) PRIMARY KEY,
    SalesmanName varchar(100)
);



INSERT INTO Customers (CustomerID, CustomerName, CustomerLocation) VALUES
('CS1', 'John Doe', 'New York');
INSERT INTO Customers (CustomerID, CustomerName, CustomerLocation) VALUES
('CS2', 'Jane Doe', 'Los Angeles');
INSERT INTO Customers (CustomerID, CustomerName, CustomerLocation) VALUES
('CS3', 'Steve Smith', 'Chicago');

INSERT INTO Products (ProductID, ProductName, ProductCategory, ProductPrice) VALUES
('PR1', 'Product A', 'Electronics', 120.00);
INSERT INTO Products (ProductID, ProductName, ProductCategory, ProductPrice) VALUES
('PR2', 'Product B', 'Books', 15.00);
INSERT INTO Products (ProductID, ProductName, ProductCategory, ProductPrice) VALUES
('PR3', 'Product C', 'Clothing', 50.00);

INSERT INTO Salesmen (SalesmanID, SalesmanName) VALUES
('SL1', 'Alice');
INSERT INTO Salesmen (SalesmanID, SalesmanName) VALUES
('SL2', 'Bob');
INSERT INTO Salesmen (SalesmanID, SalesmanName) VALUES
('SL3', 'Charlie');



--Fact Table:


CREATE TABLE Sales (
  SaleID VARCHAR2(10),
  ProductID VARCHAR2(10),
  CustomerID VARCHAR2(10),
  SalesmanID VARCHAR2(10),
  SaleAmount NUMBER(10,2),
  SaleDate DATE
);

INSERT INTO Sales (SaleID, ProductID, CustomerID, SalesmanID, SaleAmount, SaleDate) VALUES
('SAl1', 'PR1', 'CS1', 'SL1', 120.00, TO_DATE('2023-01-01', 'YYYY-MM-DD'));

INSERT INTO Sales (SaleID, ProductID, CustomerID, SalesmanID, SaleAmount, SaleDate) VALUES
('SAl2', 'PR2', 'CS2', 'SL2', 15.00, TO_DATE('2023-01-02', 'YYYY-MM-DD'));

INSERT INTO Sales (SaleID, ProductID, CustomerID, SalesmanID, SaleAmount, SaleDate) VALUES
('SAl3', 'PR3', 'CS3', 'SL3', 50.00, TO_DATE('2023-01-03', 'YYYY-MM-DD'));

INSERT INTO Sales (SaleID, ProductID, CustomerID, SalesmanID, SaleAmount, SaleDate) VALUES
('SAl4', 'PR1', 'CS2', 'SL3', 120.00, TO_DATE('2023-01-04', 'YYYY-MM-DD'));

INSERT INTO Sales (SaleID, ProductID, CustomerID, SalesmanID, SaleAmount, SaleDate) VALUES
('SAl5', 'PR2', 'CS3', 'SL1', 15.00, TO_DATE('2023-01-05', 'YYYY-MM-DD'));

INSERT INTO Sales (SaleID, ProductID, CustomerID, SalesmanID, SaleAmount, SaleDate) VALUES
('SAl6', 'PR3', 'CS1', 'SL2', 50.00, TO_DATE('2023-01-06', 'YYYY-MM-DD'));







--Queries using GROUP BY CUBE, GROUPING(), GROUPING SETS:

-- Group by cube to get total sales, sales by product, and sales by customer
SELECT ProductID, CustomerID, SUM(SaleAmount) as TotalSales
FROM Sales
GROUP BY CUBE (ProductID, CustomerID);

-- Use grouping() function to differentiate aggregated data from individual row data
SELECT ProductID, CustomerID, GROUPING(ProductID), GROUPING(CustomerID), SUM(SaleAmount) as TotalSales
FROM Sales
GROUP BY CUBE (ProductID, CustomerID);

-- Use grouping sets to get total sales, sales by product, and sales by customer separately
SELECT ProductID, CustomerID, SUM(SaleAmount) as TotalSales
FROM Sales
GROUP BY GROUPING SETS ((ProductID), (CustomerID), ());


--A table with at least 3 dimensions attributes and one fact attribute:
CREATE TABLE SalesModel (
    ProductCategory varchar(100),
    CustomerLocation varchar(100),
    SalesmanName varchar(100),
    TotalSales decimal(10,2)
);


INSERT INTO SalesModel (ProductCategory, CustomerLocation, SalesmanName, TotalSales) VALUES
('Electronics', 'New York', 'Alice', 120.00);
INSERT INTO SalesModel (ProductCategory, CustomerLocation, SalesmanName, TotalSales) VALUES
('Books', 'Los Angeles', 'Bob', 15.00);
INSERT INTO SalesModel (ProductCategory, CustomerLocation, SalesmanName, TotalSales) VALUES
('Clothing', 'Chicago', 'Charlie', 50.00);

--Queries using MODEL, PARTITION BY, DIMENSION BY, MEASURES, RULES:
-- Calculate total sales by product category and customer location
SELECT * FROM SalesModel
MODEL 
    PARTITION BY (ProductCategory) 
    DIMENSION BY (CustomerLocation)
    MEASURES (TotalSales) 
    RULES 
    (TotalSales[ANY] = SUM(TotalSales)[ANY]);

-- Calculate total sales by salesman
SELECT * FROM SalesModel
MODEL 
    PARTITION BY (SalesmanName) 
    DIMENSION BY (CustomerLocation) 
    MEASURES (TotalSales)
    RULES 
    (TotalSales[ANY] = SUM(TotalSales)[ANY]);



--Assignment 6

--Query 1

-- PL/SQL program that overwrites data in the COURSE table using a cursor
SELECT * FROM COURSE;
DECLARE 
   CURSOR course_cursor IS SELECT * FROM COURSE;
   course_record COURSE%ROWTYPE; 
BEGIN 
   OPEN course_cursor; 

   LOOP 
      FETCH course_cursor INTO course_record; 
      
      EXIT WHEN course_cursor%NOTFOUND; 

      -- Here, overwriting the COURSE_CREDITS to a constant value 5 for demonstration
      -- You can replace it with your own logic
      UPDATE COURSE 
      SET COURSE_CREDITS = 5 
      WHERE COURSE_ID = course_record.COURSE_ID; 
   END LOOP; 

   CLOSE course_cursor; 
   COMMIT; 
END;

--Query 1b
SET SERVEROUTPUT ON;
DECLARE 
  -- Declare a cursor to fetch rows from the COURSE table
  CURSOR course_cursor IS SELECT * FROM COURSE;
  
  -- Declare a record variable of the COURSE table's row type
  course_record COURSE%ROWTYPE; 
  
  -- Variables to hold the average course credits before and after update
  avg_credits_before NUMBER;
  avg_credits_after NUMBER;
  
  -- Variables to hold details of the first course before and after the update
  first_course_id_before VARCHAR2(5);
  first_course_name_before VARCHAR2(20);
  first_course_credits_before INTEGER;
  
  first_course_id_after VARCHAR2(5);
  first_course_name_after VARCHAR2(20);
  first_course_credits_after INTEGER;
BEGIN 
  -- Calculate the average course credits before the update
  SELECT AVG(COURSE_CREDITS) INTO avg_credits_before FROM COURSE;

  -- Fetch details of the first course before the update
  SELECT COURSE_ID, COURSE_NAME, COURSE_CREDITS INTO first_course_id_before, first_course_name_before, first_course_credits_before
  FROM COURSE
  WHERE ROWNUM = 1;

  OPEN course_cursor; 

  LOOP 
    FETCH course_cursor INTO course_record; 

    EXIT WHEN course_cursor%NOTFOUND; 

    -- Overwrite the COURSE_CREDITS to a constant value 5 for demonstration
    UPDATE COURSE 
    SET COURSE_CREDITS = 5 
    WHERE COURSE_ID = course_record.COURSE_ID; 
  END LOOP; 

  CLOSE course_cursor; 

  COMMIT; 

  -- Calculate the average course credits after the update
  SELECT AVG(COURSE_CREDITS) INTO avg_credits_after FROM COURSE;

  -- Fetch details of the first course after the update
  SELECT COURSE_ID, COURSE_NAME, COURSE_CREDITS INTO first_course_id_after, first_course_name_after, first_course_credits_after
  FROM COURSE
  WHERE ROWNUM = 1;

  -- Print the average course credits before and after the update
  dbms_output.put_line('Average course credits before update: ' || avg_credits_before);
  dbms_output.put_line('Average course credits after update: ' || avg_credits_after);

  -- Print details of the first course before and after the update
  dbms_output.put_line('First course before update - ID: ' || first_course_id_before || ', Name: ' || first_course_name_before || ', Credits: ' || first_course_credits_before);
  dbms_output.put_line('First course after update - ID: ' || first_course_id_after || ', Name: ' || first_course_name_after || ', Credits: ' || first_course_credits_after);
END;   


--Query 2


-- Starting with creating the audit_log table for storing the log details
CREATE TABLE audit_log (
  log_id          NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,  -- Unique ID for each log entry
  username        VARCHAR2(50),  -- Username of the person performing the action
  action          VARCHAR2(50),  -- Action performed (INSERT in our case)
  action_date     DATE,  -- Date and time when the action was performed
  student_id      VARCHAR2(5),  -- ID of the student inserted
  student_name    VARCHAR2(50)  -- Full name of the student inserted
);

-- Create a trigger that will execute after each INSERT operation on the STUDENTS table
CREATE OR REPLACE TRIGGER student_insert_log
  AFTER INSERT ON STUDENTS
  FOR EACH ROW
DECLARE
  v_username varchar2(10);
  v_student_name varchar2(50);
BEGIN
  -- Get the username of the person performing the INSERT operation
  SELECT user INTO v_username FROM dual;
  
  -- Prepare the full name of the student
  v_student_name := :new.STUDENTFIRSTNAME || ' ' || :new.STUDENTLASTNAME;

  -- Insert a new record into the audit_log table containing details about the action
  INSERT INTO audit_log(username, action, action_date, student_id, student_name)
  VALUES(v_username, 'INSERTED STUDENT', SYSDATE, :new.STUDENTID, v_student_name);
END;
/

-- Testing the trigger

-- Insert a new student into the STUDENTS table
-- The trigger should automatically create a log entry in the audit_log table
INSERT INTO STUDENTS(STUDENTID, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH)
VALUES('S1224', 'Johnny', 'Doe', TO_DATE('2001-01-01', 'YYYY-MM-DD'));

-- Commit the transaction to make sure that changes are saved
COMMIT;

-- Now check the contents of the audit_log table
-- If the trigger works as expected, it should contain a new record with details about the insertion action
SELECT * FROM audit_log;

-- Insert a couple more students to further test the trigger
INSERT INTO STUDENTS(STUDENTID, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH)
VALUES('S1235', 'Jane', 'Doe', TO_DATE('2002-02-02', 'YYYY-MM-DD'));

INSERT INTO STUDENTS(STUDENTID, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH)
VALUES('S1236', 'Jim', 'Doe', TO_DATE('2003-03-03', 'YYYY-MM-DD'));

-- Commit the transactions
COMMIT;

-- Check the audit_log table again
-- Now it should contain three records - one for each student insertion
SELECT * FROM audit_log;





--Query 3
-- Query 3
-- Creating a function that retrieves the number of students for a given major and year of birth
CREATE OR REPLACE FUNCTION count_students_by_major_and_year(p_major_name IN VARCHAR2, p_year IN NUMBER)
RETURN NUMBER IS
  v_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_count
  FROM STUDENTS
  WHERE MAJOR_NAME = p_major_name AND EXTRACT(YEAR FROM STUDENT_DATE_OF_BIRTH) = p_year;

  RETURN v_count;
END;
/

-- Creating a procedure that prints the number of students for a given major and year of birth using the above function
CREATE OR REPLACE PROCEDURE print_students_by_major_and_year(p_major_name IN VARCHAR2, p_year IN NUMBER) IS
  v_count NUMBER;
BEGIN
  v_count := count_students_by_major_and_year(p_major_name, p_year);

  dbms_output.put_line('Major ' || p_major_name || ' in year ' || p_year || ' had ' || v_count || ' students.');
END;
/

-- Test the function and procedure
SET SERVEROUTPUT ON;
DECLARE
  v_major_name VARCHAR2(50) := 'Computer Science';
  v_year NUMBER := 2000;
BEGIN
  print_students_by_major_and_year(v_major_name, v_year);
END;
/

-- We can use the function in SQL WITH clause as well
-- We can use the function in SQL WITH clause as well
WITH major_counts AS (
  SELECT MAJOR_NAME, count_students_by_major_and_year(MAJOR_NAME, 2000) AS student_count
  FROM MAJOR
)
SELECT * FROM major_counts;



--Query 4
SET SERVEROUTPUT ON;
-- Create a PL/SQL program that demonstrates the use of dynamic SQL
DECLARE
  v_table_name VARCHAR2(50) := 'STUDENTS';
  v_sql VARCHAR2(1000);
  v_count NUMBER;

  v_studentid VARCHAR2(5);
  v_firstname VARCHAR2(20);
  v_lastname VARCHAR2(20);
  v_dob DATE;
BEGIN
  -- Build the SQL statement dynamically to count rows
  v_sql := 'SELECT COUNT(*) FROM ' || v_table_name;
  
  -- Execute the dynamic SQL statement and get the count
  EXECUTE IMMEDIATE v_sql INTO v_count;
  
  -- Print the count result
  dbms_output.put_line('Table ' || v_table_name || ' has ' || v_count || ' rows.');

  -- Build the SQL statement dynamically to select the first row
  v_sql := 'SELECT STUDENTID, STUDENTFIRSTNAME, STUDENTLASTNAME, STUDENT_DATE_OF_BIRTH FROM ' 
           || v_table_name || ' WHERE ROWNUM = 1';
  
  -- Execute the dynamic SQL statement and get the row data
  EXECUTE IMMEDIATE v_sql INTO v_studentid, v_firstname, v_lastname, v_dob;
  
  -- Print the row data
  dbms_output.put_line('First row in ' || v_table_name || ':');
  dbms_output.put_line('Student ID: ' || v_studentid);
  dbms_output.put_line('First Name: ' || v_firstname);
  dbms_output.put_line('Last Name: ' || v_lastname);
  dbms_output.put_line('Date of Birth: ' || v_dob);
END;
/






